// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: oauth_clients.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const clientIDExists = `-- name: ClientIDExists :one
SELECT EXISTS(SELECT 1 FROM oauth_clients WHERE client_id = $1)
`

func (q *Queries) ClientIDExists(ctx context.Context, clientID string) (bool, error) {
	row := q.db.QueryRowContext(ctx, clientIDExists, clientID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createOAuthClient = `-- name: CreateOAuthClient :one
INSERT INTO oauth_clients (client_id, client_secret_hash, name, description, redirect_uris, grant_types, is_public, token_endpoint_auth_method)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, client_id, name, description, redirect_uris, grant_types, is_public, token_endpoint_auth_method, created_at, updated_at
`

type CreateOAuthClientParams struct {
	ClientID                string
	ClientSecretHash        sql.NullString
	Name                    string
	Description             sql.NullString
	RedirectUris            []string
	GrantTypes              []GrantTypes
	IsPublic                sql.NullBool
	TokenEndpointAuthMethod sql.NullString
}

type CreateOAuthClientRow struct {
	ID                      uuid.UUID
	ClientID                string
	Name                    string
	Description             sql.NullString
	RedirectUris            []string
	GrantTypes              []GrantTypes
	IsPublic                sql.NullBool
	TokenEndpointAuthMethod sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) CreateOAuthClient(ctx context.Context, arg CreateOAuthClientParams) (CreateOAuthClientRow, error) {
	row := q.db.QueryRowContext(ctx, createOAuthClient,
		arg.ClientID,
		arg.ClientSecretHash,
		arg.Name,
		arg.Description,
		pq.Array(arg.RedirectUris),
		pq.Array(arg.GrantTypes),
		arg.IsPublic,
		arg.TokenEndpointAuthMethod,
	)
	var i CreateOAuthClientRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RedirectUris),
		pq.Array(&i.GrantTypes),
		&i.IsPublic,
		&i.TokenEndpointAuthMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOAuthClient = `-- name: DeleteOAuthClient :exec
DELETE FROM oauth_clients WHERE id = $1
`

func (q *Queries) DeleteOAuthClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOAuthClient, id)
	return err
}

const getOAuthClient = `-- name: GetOAuthClient :one
SELECT id, client_id, client_secret_hash, name, description, redirect_uris, grant_types, is_public, token_endpoint_auth_method, created_at, updated_at
FROM oauth_clients
WHERE id = $1
`

type GetOAuthClientRow struct {
	ID                      uuid.UUID
	ClientID                string
	ClientSecretHash        sql.NullString
	Name                    string
	Description             sql.NullString
	RedirectUris            []string
	GrantTypes              []GrantTypes
	IsPublic                sql.NullBool
	TokenEndpointAuthMethod sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) GetOAuthClient(ctx context.Context, id uuid.UUID) (GetOAuthClientRow, error) {
	row := q.db.QueryRowContext(ctx, getOAuthClient, id)
	var i GetOAuthClientRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecretHash,
		&i.Name,
		&i.Description,
		pq.Array(&i.RedirectUris),
		pq.Array(&i.GrantTypes),
		&i.IsPublic,
		&i.TokenEndpointAuthMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOAuthClientByClientID = `-- name: GetOAuthClientByClientID :one
SELECT 
    oc.id, 
    oc.client_id, 
    oc.client_secret_hash, 
    oc.name, 
    oc.description, 
    oc.redirect_uris, 
    oc.grant_types, 
    oc.is_public, 
    oc.token_endpoint_auth_method, 
    oc.created_at, 
    oc.updated_at,
    ARRAY_AGG(s.name)::TEXT[] as scopes
FROM oauth_clients oc
JOIN oauth_clients_scopes ocs ON oc.id = ocs.oauth_client_id
JOIN scopes s ON ocs.scope_id = s.id
WHERE client_id = $1
GROUP BY 
    oc.id, 
    oc.client_id, 
    oc.client_secret_hash, 
    oc.name, 
    oc.description, 
    oc.redirect_uris, 
    oc.grant_types, 
    oc.is_public, 
    oc.token_endpoint_auth_method, 
    oc.created_at, 
    oc.updated_at
`

type GetOAuthClientByClientIDRow struct {
	ID                      uuid.UUID
	ClientID                string
	ClientSecretHash        sql.NullString
	Name                    string
	Description             sql.NullString
	RedirectUris            []string
	GrantTypes              []GrantTypes
	IsPublic                sql.NullBool
	TokenEndpointAuthMethod sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
	Scopes                  []string
}

func (q *Queries) GetOAuthClientByClientID(ctx context.Context, clientID string) (GetOAuthClientByClientIDRow, error) {
	row := q.db.QueryRowContext(ctx, getOAuthClientByClientID, clientID)
	var i GetOAuthClientByClientIDRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientSecretHash,
		&i.Name,
		&i.Description,
		pq.Array(&i.RedirectUris),
		pq.Array(&i.GrantTypes),
		&i.IsPublic,
		&i.TokenEndpointAuthMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Scopes),
	)
	return i, err
}

const listOAuthClients = `-- name: ListOAuthClients :many
SELECT id, client_id, name, description, redirect_uris, grant_types, is_public, token_endpoint_auth_method, created_at, updated_at
FROM oauth_clients
ORDER BY name
`

type ListOAuthClientsRow struct {
	ID                      uuid.UUID
	ClientID                string
	Name                    string
	Description             sql.NullString
	RedirectUris            []string
	GrantTypes              []GrantTypes
	IsPublic                sql.NullBool
	TokenEndpointAuthMethod sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) ListOAuthClients(ctx context.Context) ([]ListOAuthClientsRow, error) {
	rows, err := q.db.QueryContext(ctx, listOAuthClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOAuthClientsRow
	for rows.Next() {
		var i ListOAuthClientsRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.Name,
			&i.Description,
			pq.Array(&i.RedirectUris),
			pq.Array(&i.GrantTypes),
			&i.IsPublic,
			&i.TokenEndpointAuthMethod,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOAuthClient = `-- name: UpdateOAuthClient :one
UPDATE oauth_clients
SET name = $2, description = $3, redirect_uris = $4, grant_types = $5, is_public = $6, token_endpoint_auth_method = $7
WHERE id = $1
RETURNING id, client_id, name, description, redirect_uris, grant_types, is_public, token_endpoint_auth_method, created_at, updated_at
`

type UpdateOAuthClientParams struct {
	ID                      uuid.UUID
	Name                    string
	Description             sql.NullString
	RedirectUris            []string
	GrantTypes              []GrantTypes
	IsPublic                sql.NullBool
	TokenEndpointAuthMethod sql.NullString
}

type UpdateOAuthClientRow struct {
	ID                      uuid.UUID
	ClientID                string
	Name                    string
	Description             sql.NullString
	RedirectUris            []string
	GrantTypes              []GrantTypes
	IsPublic                sql.NullBool
	TokenEndpointAuthMethod sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) UpdateOAuthClient(ctx context.Context, arg UpdateOAuthClientParams) (UpdateOAuthClientRow, error) {
	row := q.db.QueryRowContext(ctx, updateOAuthClient,
		arg.ID,
		arg.Name,
		arg.Description,
		pq.Array(arg.RedirectUris),
		pq.Array(arg.GrantTypes),
		arg.IsPublic,
		arg.TokenEndpointAuthMethod,
	)
	var i UpdateOAuthClientRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Name,
		&i.Description,
		pq.Array(&i.RedirectUris),
		pq.Array(&i.GrantTypes),
		&i.IsPublic,
		&i.TokenEndpointAuthMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOAuthClientSecret = `-- name: UpdateOAuthClientSecret :exec
UPDATE oauth_clients
SET client_secret_hash = $2
WHERE id = $1
`

type UpdateOAuthClientSecretParams struct {
	ID               uuid.UUID
	ClientSecretHash sql.NullString
}

func (q *Queries) UpdateOAuthClientSecret(ctx context.Context, arg UpdateOAuthClientSecretParams) error {
	_, err := q.db.ExecContext(ctx, updateOAuthClientSecret, arg.ID, arg.ClientSecretHash)
	return err
}

const validateRedirectURI = `-- name: ValidateRedirectURI :one
SELECT EXISTS(SELECT 1 FROM oauth_clients WHERE client_id = $1 AND $2 = ANY(redirect_uris))
`

type ValidateRedirectURIParams struct {
	ClientID     string
	RedirectUris []string
}

func (q *Queries) ValidateRedirectURI(ctx context.Context, arg ValidateRedirectURIParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, validateRedirectURI, arg.ClientID, pq.Array(arg.RedirectUris))
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
