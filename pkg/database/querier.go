// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package database

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error
	AssignScopeToRole(ctx context.Context, arg AssignScopeToRoleParams) error
	ClientIDExists(ctx context.Context, clientID string) (bool, error)
	CreateOAuthClient(ctx context.Context, arg CreateOAuthClientParams) (CreateOAuthClientRow, error)
	CreateRole(ctx context.Context, arg CreateRoleParams) (CreateRoleRow, error)
	CreateScope(ctx context.Context, arg CreateScopeParams) (CreateScopeRow, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error)
	DeleteOAuthClient(ctx context.Context, id uuid.UUID) error
	DeleteRole(ctx context.Context, id uuid.UUID) error
	DeleteScope(ctx context.Context, id uuid.UUID) error
	DeleteUser(ctx context.Context, id uuid.UUID) error
	EmailExists(ctx context.Context, email string) (bool, error)
	GetOAuthClient(ctx context.Context, id uuid.UUID) (GetOAuthClientRow, error)
	GetOAuthClientByClientID(ctx context.Context, clientID string) (GetOAuthClientByClientIDRow, error)
	GetRole(ctx context.Context, id uuid.UUID) (GetRoleRow, error)
	GetRoleByName(ctx context.Context, name string) (GetRoleByNameRow, error)
	GetRoleWithScopes(ctx context.Context, id uuid.UUID) (GetRoleWithScopesRow, error)
	GetRolesWithScope(ctx context.Context, scopeID uuid.UUID) ([]GetRolesWithScopeRow, error)
	GetScope(ctx context.Context, id uuid.UUID) (GetScopeRow, error)
	GetScopeByName(ctx context.Context, name string) (GetScopeByNameRow, error)
	GetScopesForRole(ctx context.Context, roleID uuid.UUID) ([]GetScopesForRoleRow, error)
	GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error)
	GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error)
	GetUserRoles(ctx context.Context, userID uuid.UUID) ([]GetUserRolesRow, error)
	GetUserScopes(ctx context.Context, userID uuid.UUID) ([]string, error)
	GetUserWithRolesAndScopes(ctx context.Context, id uuid.UUID) (GetUserWithRolesAndScopesRow, error)
	GetUsersWithRole(ctx context.Context, roleID uuid.UUID) ([]GetUsersWithRoleRow, error)
	ListOAuthClients(ctx context.Context) ([]ListOAuthClientsRow, error)
	ListRoles(ctx context.Context) ([]ListRolesRow, error)
	ListScopes(ctx context.Context) ([]ListScopesRow, error)
	ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error)
	RemoveAllRolesFromUser(ctx context.Context, userID uuid.UUID) error
	RemoveAllScopesFromRole(ctx context.Context, roleID uuid.UUID) error
	RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error
	RemoveScopeFromRole(ctx context.Context, arg RemoveScopeFromRoleParams) error
	RoleHasScope(ctx context.Context, arg RoleHasScopeParams) (bool, error)
	ScopeExistsByName(ctx context.Context, name string) (bool, error)
	UpdateOAuthClient(ctx context.Context, arg UpdateOAuthClientParams) (UpdateOAuthClientRow, error)
	UpdateOAuthClientSecret(ctx context.Context, arg UpdateOAuthClientSecretParams) error
	UpdateRole(ctx context.Context, arg UpdateRoleParams) (UpdateRoleRow, error)
	UpdateScope(ctx context.Context, arg UpdateScopeParams) (UpdateScopeRow, error)
	UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error)
	UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error
	UserHasRole(ctx context.Context, arg UserHasRoleParams) (bool, error)
	ValidateRedirectURI(ctx context.Context, arg ValidateRedirectURIParams) (bool, error)
}

var _ Querier = (*Queries)(nil)
