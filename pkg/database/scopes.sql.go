// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: scopes.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createScope = `-- name: CreateScope :one
INSERT INTO scopes (name, description) 
VALUES ($1, $2) 
RETURNING id, name, description, created_at, updated_at
`

type CreateScopeParams struct {
	Name        string
	Description sql.NullString
}

type CreateScopeRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateScope(ctx context.Context, arg CreateScopeParams) (CreateScopeRow, error) {
	row := q.db.QueryRowContext(ctx, createScope, arg.Name, arg.Description)
	var i CreateScopeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteScope = `-- name: DeleteScope :exec
DELETE FROM scopes WHERE id = $1
`

func (q *Queries) DeleteScope(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteScope, id)
	return err
}

const getScope = `-- name: GetScope :one
SELECT id, name, description, created_at, updated_at 
FROM scopes 
WHERE id = $1
`

type GetScopeRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetScope(ctx context.Context, id uuid.UUID) (GetScopeRow, error) {
	row := q.db.QueryRowContext(ctx, getScope, id)
	var i GetScopeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getScopeByName = `-- name: GetScopeByName :one
SELECT id, name, description, created_at, updated_at 
FROM scopes 
WHERE name = $1
`

type GetScopeByNameRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetScopeByName(ctx context.Context, name string) (GetScopeByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getScopeByName, name)
	var i GetScopeByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listScopes = `-- name: ListScopes :many
SELECT id, name, description, created_at, updated_at 
FROM scopes 
ORDER BY name
`

type ListScopesRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) ListScopes(ctx context.Context) ([]ListScopesRow, error) {
	rows, err := q.db.QueryContext(ctx, listScopes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListScopesRow
	for rows.Next() {
		var i ListScopesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scopeExistsByName = `-- name: ScopeExistsByName :one
SELECT EXISTS(SELECT 1 FROM scopes WHERE name = $1)
`

func (q *Queries) ScopeExistsByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, scopeExistsByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateScope = `-- name: UpdateScope :one
UPDATE scopes 
SET name = $2, description = $3 
WHERE id = $1 
RETURNING id, name, description, created_at, updated_at
`

type UpdateScopeParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
}

type UpdateScopeRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) UpdateScope(ctx context.Context, arg UpdateScopeParams) (UpdateScopeRow, error) {
	row := q.db.QueryRowContext(ctx, updateScope, arg.ID, arg.Name, arg.Description)
	var i UpdateScopeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
