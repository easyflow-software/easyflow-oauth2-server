// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: roles.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name, description) 
VALUES ($1, $2) 
RETURNING id, name, description, created_at, updated_at
`

type CreateRoleParams struct {
	Name        string
	Description sql.NullString
}

type CreateRoleRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (CreateRoleRow, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Name, arg.Description)
	var i CreateRoleRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, name, description, created_at, updated_at 
FROM roles 
WHERE id = $1
`

type GetRoleRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetRole(ctx context.Context, id uuid.UUID) (GetRoleRow, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i GetRoleRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, description, created_at, updated_at 
FROM roles 
WHERE name = $1
`

type GetRoleByNameRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetRoleByName(ctx context.Context, name string) (GetRoleByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, name)
	var i GetRoleByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleWithScopes = `-- name: GetRoleWithScopes :one
SELECT r.id, r.name, r.description, r.created_at, r.updated_at,
       COALESCE(array_agg(s.name) FILTER (WHERE s.name IS NOT NULL), ARRAY[]::TEXT[]) as scope_names
FROM roles r
LEFT JOIN roles_scopes rs ON r.id = rs.role_id
LEFT JOIN scopes s ON rs.scope_id = s.id
WHERE r.id = $1
GROUP BY r.id, r.name, r.description, r.created_at, r.updated_at
`

type GetRoleWithScopesRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ScopeNames  interface{}
}

func (q *Queries) GetRoleWithScopes(ctx context.Context, id uuid.UUID) (GetRoleWithScopesRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleWithScopes, id)
	var i GetRoleWithScopesRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ScopeNames,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, description, created_at, updated_at 
FROM roles 
ORDER BY name
`

type ListRolesRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) ListRoles(ctx context.Context) ([]ListRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRolesRow
	for rows.Next() {
		var i ListRolesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles 
SET name = $2, description = $3 
WHERE id = $1 
RETURNING id, name, description, created_at, updated_at
`

type UpdateRoleParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
}

type UpdateRoleRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (UpdateRoleRow, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.ID, arg.Name, arg.Description)
	var i UpdateRoleRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
