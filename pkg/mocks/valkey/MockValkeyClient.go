// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_valkey

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/valkey-io/valkey-go"
)

// NewMockValkeyClient creates a new instance of MockValkeyClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValkeyClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValkeyClient {
	mock := &MockValkeyClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockValkeyClient is an autogenerated mock type for the Client type
type MockValkeyClient struct {
	mock.Mock
}

type MockValkeyClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValkeyClient) EXPECT() *MockValkeyClient_Expecter {
	return &MockValkeyClient_Expecter{mock: &_m.Mock}
}

// B provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) B() valkey.Builder {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for B")
	}

	var r0 valkey.Builder
	if returnFunc, ok := ret.Get(0).(func() valkey.Builder); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(valkey.Builder)
	}
	return r0
}

// MockValkeyClient_B_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'B'
type MockValkeyClient_B_Call struct {
	*mock.Call
}

// B is a helper method to define mock.On call
func (_e *MockValkeyClient_Expecter) B() *MockValkeyClient_B_Call {
	return &MockValkeyClient_B_Call{Call: _e.mock.On("B")}
}

func (_c *MockValkeyClient_B_Call) Run(run func()) *MockValkeyClient_B_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValkeyClient_B_Call) Return(v valkey.Builder) *MockValkeyClient_B_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockValkeyClient_B_Call) RunAndReturn(run func() valkey.Builder) *MockValkeyClient_B_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) Close() {
	_mock.Called()
	return
}

// MockValkeyClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockValkeyClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockValkeyClient_Expecter) Close() *MockValkeyClient_Close_Call {
	return &MockValkeyClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockValkeyClient_Close_Call) Run(run func()) *MockValkeyClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValkeyClient_Close_Call) Return() *MockValkeyClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockValkeyClient_Close_Call) RunAndReturn(run func()) *MockValkeyClient_Close_Call {
	_c.Run(run)
	return _c
}

// Dedicate provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) Dedicate() (valkey.DedicatedClient, func()) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dedicate")
	}

	var r0 valkey.DedicatedClient
	var r1 func()
	if returnFunc, ok := ret.Get(0).(func() (valkey.DedicatedClient, func())); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() valkey.DedicatedClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(valkey.DedicatedClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() func()); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}
	return r0, r1
}

// MockValkeyClient_Dedicate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dedicate'
type MockValkeyClient_Dedicate_Call struct {
	*mock.Call
}

// Dedicate is a helper method to define mock.On call
func (_e *MockValkeyClient_Expecter) Dedicate() *MockValkeyClient_Dedicate_Call {
	return &MockValkeyClient_Dedicate_Call{Call: _e.mock.On("Dedicate")}
}

func (_c *MockValkeyClient_Dedicate_Call) Run(run func()) *MockValkeyClient_Dedicate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValkeyClient_Dedicate_Call) Return(client valkey.DedicatedClient, cancel func()) *MockValkeyClient_Dedicate_Call {
	_c.Call.Return(client, cancel)
	return _c
}

func (_c *MockValkeyClient_Dedicate_Call) RunAndReturn(run func() (valkey.DedicatedClient, func())) *MockValkeyClient_Dedicate_Call {
	_c.Call.Return(run)
	return _c
}

// Dedicated provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) Dedicated(fn func(valkey.DedicatedClient) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Dedicated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(valkey.DedicatedClient) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValkeyClient_Dedicated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dedicated'
type MockValkeyClient_Dedicated_Call struct {
	*mock.Call
}

// Dedicated is a helper method to define mock.On call
//   - fn func(valkey.DedicatedClient) error
func (_e *MockValkeyClient_Expecter) Dedicated(fn interface{}) *MockValkeyClient_Dedicated_Call {
	return &MockValkeyClient_Dedicated_Call{Call: _e.mock.On("Dedicated", fn)}
}

func (_c *MockValkeyClient_Dedicated_Call) Run(run func(fn func(valkey.DedicatedClient) error)) *MockValkeyClient_Dedicated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(valkey.DedicatedClient) error
		if args[0] != nil {
			arg0 = args[0].(func(valkey.DedicatedClient) error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockValkeyClient_Dedicated_Call) Return(err error) *MockValkeyClient_Dedicated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValkeyClient_Dedicated_Call) RunAndReturn(run func(fn func(valkey.DedicatedClient) error) error) *MockValkeyClient_Dedicated_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) Do(ctx context.Context, cmd valkey.Completed) valkey.ValkeyResult {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 valkey.ValkeyResult
	if returnFunc, ok := ret.Get(0).(func(context.Context, valkey.Completed) valkey.ValkeyResult); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		r0 = ret.Get(0).(valkey.ValkeyResult)
	}
	return r0
}

// MockValkeyClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockValkeyClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd valkey.Completed
func (_e *MockValkeyClient_Expecter) Do(ctx interface{}, cmd interface{}) *MockValkeyClient_Do_Call {
	return &MockValkeyClient_Do_Call{Call: _e.mock.On("Do", ctx, cmd)}
}

func (_c *MockValkeyClient_Do_Call) Run(run func(ctx context.Context, cmd valkey.Completed)) *MockValkeyClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 valkey.Completed
		if args[1] != nil {
			arg1 = args[1].(valkey.Completed)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValkeyClient_Do_Call) Return(resp valkey.ValkeyResult) *MockValkeyClient_Do_Call {
	_c.Call.Return(resp)
	return _c
}

func (_c *MockValkeyClient_Do_Call) RunAndReturn(run func(ctx context.Context, cmd valkey.Completed) valkey.ValkeyResult) *MockValkeyClient_Do_Call {
	_c.Call.Return(run)
	return _c
}

// DoCache provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) DoCache(ctx context.Context, cmd valkey.Cacheable, ttl time.Duration) valkey.ValkeyResult {
	ret := _mock.Called(ctx, cmd, ttl)

	if len(ret) == 0 {
		panic("no return value specified for DoCache")
	}

	var r0 valkey.ValkeyResult
	if returnFunc, ok := ret.Get(0).(func(context.Context, valkey.Cacheable, time.Duration) valkey.ValkeyResult); ok {
		r0 = returnFunc(ctx, cmd, ttl)
	} else {
		r0 = ret.Get(0).(valkey.ValkeyResult)
	}
	return r0
}

// MockValkeyClient_DoCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoCache'
type MockValkeyClient_DoCache_Call struct {
	*mock.Call
}

// DoCache is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd valkey.Cacheable
//   - ttl time.Duration
func (_e *MockValkeyClient_Expecter) DoCache(ctx interface{}, cmd interface{}, ttl interface{}) *MockValkeyClient_DoCache_Call {
	return &MockValkeyClient_DoCache_Call{Call: _e.mock.On("DoCache", ctx, cmd, ttl)}
}

func (_c *MockValkeyClient_DoCache_Call) Run(run func(ctx context.Context, cmd valkey.Cacheable, ttl time.Duration)) *MockValkeyClient_DoCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 valkey.Cacheable
		if args[1] != nil {
			arg1 = args[1].(valkey.Cacheable)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockValkeyClient_DoCache_Call) Return(resp valkey.ValkeyResult) *MockValkeyClient_DoCache_Call {
	_c.Call.Return(resp)
	return _c
}

func (_c *MockValkeyClient_DoCache_Call) RunAndReturn(run func(ctx context.Context, cmd valkey.Cacheable, ttl time.Duration) valkey.ValkeyResult) *MockValkeyClient_DoCache_Call {
	_c.Call.Return(run)
	return _c
}

// DoMulti provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) DoMulti(ctx context.Context, multi ...valkey.Completed) []valkey.ValkeyResult {
	var tmpRet mock.Arguments
	if len(multi) > 0 {
		tmpRet = _mock.Called(ctx, multi)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DoMulti")
	}

	var r0 []valkey.ValkeyResult
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...valkey.Completed) []valkey.ValkeyResult); ok {
		r0 = returnFunc(ctx, multi...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]valkey.ValkeyResult)
		}
	}
	return r0
}

// MockValkeyClient_DoMulti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoMulti'
type MockValkeyClient_DoMulti_Call struct {
	*mock.Call
}

// DoMulti is a helper method to define mock.On call
//   - ctx context.Context
//   - multi ...valkey.Completed
func (_e *MockValkeyClient_Expecter) DoMulti(ctx interface{}, multi ...interface{}) *MockValkeyClient_DoMulti_Call {
	return &MockValkeyClient_DoMulti_Call{Call: _e.mock.On("DoMulti",
		append([]interface{}{ctx}, multi...)...)}
}

func (_c *MockValkeyClient_DoMulti_Call) Run(run func(ctx context.Context, multi ...valkey.Completed)) *MockValkeyClient_DoMulti_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []valkey.Completed
		var variadicArgs []valkey.Completed
		if len(args) > 1 {
			variadicArgs = args[1].([]valkey.Completed)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockValkeyClient_DoMulti_Call) Return(resp []valkey.ValkeyResult) *MockValkeyClient_DoMulti_Call {
	_c.Call.Return(resp)
	return _c
}

func (_c *MockValkeyClient_DoMulti_Call) RunAndReturn(run func(ctx context.Context, multi ...valkey.Completed) []valkey.ValkeyResult) *MockValkeyClient_DoMulti_Call {
	_c.Call.Return(run)
	return _c
}

// DoMultiCache provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) DoMultiCache(ctx context.Context, multi ...valkey.CacheableTTL) []valkey.ValkeyResult {
	var tmpRet mock.Arguments
	if len(multi) > 0 {
		tmpRet = _mock.Called(ctx, multi)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DoMultiCache")
	}

	var r0 []valkey.ValkeyResult
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...valkey.CacheableTTL) []valkey.ValkeyResult); ok {
		r0 = returnFunc(ctx, multi...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]valkey.ValkeyResult)
		}
	}
	return r0
}

// MockValkeyClient_DoMultiCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoMultiCache'
type MockValkeyClient_DoMultiCache_Call struct {
	*mock.Call
}

// DoMultiCache is a helper method to define mock.On call
//   - ctx context.Context
//   - multi ...valkey.CacheableTTL
func (_e *MockValkeyClient_Expecter) DoMultiCache(ctx interface{}, multi ...interface{}) *MockValkeyClient_DoMultiCache_Call {
	return &MockValkeyClient_DoMultiCache_Call{Call: _e.mock.On("DoMultiCache",
		append([]interface{}{ctx}, multi...)...)}
}

func (_c *MockValkeyClient_DoMultiCache_Call) Run(run func(ctx context.Context, multi ...valkey.CacheableTTL)) *MockValkeyClient_DoMultiCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []valkey.CacheableTTL
		var variadicArgs []valkey.CacheableTTL
		if len(args) > 1 {
			variadicArgs = args[1].([]valkey.CacheableTTL)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockValkeyClient_DoMultiCache_Call) Return(resp []valkey.ValkeyResult) *MockValkeyClient_DoMultiCache_Call {
	_c.Call.Return(resp)
	return _c
}

func (_c *MockValkeyClient_DoMultiCache_Call) RunAndReturn(run func(ctx context.Context, multi ...valkey.CacheableTTL) []valkey.ValkeyResult) *MockValkeyClient_DoMultiCache_Call {
	_c.Call.Return(run)
	return _c
}

// DoMultiStream provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) DoMultiStream(ctx context.Context, multi ...valkey.Completed) valkey.MultiValkeyResultStream {
	var tmpRet mock.Arguments
	if len(multi) > 0 {
		tmpRet = _mock.Called(ctx, multi)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DoMultiStream")
	}

	var r0 valkey.MultiValkeyResultStream
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...valkey.Completed) valkey.MultiValkeyResultStream); ok {
		r0 = returnFunc(ctx, multi...)
	} else {
		r0 = ret.Get(0).(valkey.MultiValkeyResultStream)
	}
	return r0
}

// MockValkeyClient_DoMultiStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoMultiStream'
type MockValkeyClient_DoMultiStream_Call struct {
	*mock.Call
}

// DoMultiStream is a helper method to define mock.On call
//   - ctx context.Context
//   - multi ...valkey.Completed
func (_e *MockValkeyClient_Expecter) DoMultiStream(ctx interface{}, multi ...interface{}) *MockValkeyClient_DoMultiStream_Call {
	return &MockValkeyClient_DoMultiStream_Call{Call: _e.mock.On("DoMultiStream",
		append([]interface{}{ctx}, multi...)...)}
}

func (_c *MockValkeyClient_DoMultiStream_Call) Run(run func(ctx context.Context, multi ...valkey.Completed)) *MockValkeyClient_DoMultiStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []valkey.Completed
		var variadicArgs []valkey.Completed
		if len(args) > 1 {
			variadicArgs = args[1].([]valkey.Completed)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockValkeyClient_DoMultiStream_Call) Return(v valkey.MultiValkeyResultStream) *MockValkeyClient_DoMultiStream_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockValkeyClient_DoMultiStream_Call) RunAndReturn(run func(ctx context.Context, multi ...valkey.Completed) valkey.MultiValkeyResultStream) *MockValkeyClient_DoMultiStream_Call {
	_c.Call.Return(run)
	return _c
}

// DoStream provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) DoStream(ctx context.Context, cmd valkey.Completed) valkey.ValkeyResultStream {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for DoStream")
	}

	var r0 valkey.ValkeyResultStream
	if returnFunc, ok := ret.Get(0).(func(context.Context, valkey.Completed) valkey.ValkeyResultStream); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		r0 = ret.Get(0).(valkey.ValkeyResultStream)
	}
	return r0
}

// MockValkeyClient_DoStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoStream'
type MockValkeyClient_DoStream_Call struct {
	*mock.Call
}

// DoStream is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd valkey.Completed
func (_e *MockValkeyClient_Expecter) DoStream(ctx interface{}, cmd interface{}) *MockValkeyClient_DoStream_Call {
	return &MockValkeyClient_DoStream_Call{Call: _e.mock.On("DoStream", ctx, cmd)}
}

func (_c *MockValkeyClient_DoStream_Call) Run(run func(ctx context.Context, cmd valkey.Completed)) *MockValkeyClient_DoStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 valkey.Completed
		if args[1] != nil {
			arg1 = args[1].(valkey.Completed)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValkeyClient_DoStream_Call) Return(valkeyResultStream valkey.ValkeyResultStream) *MockValkeyClient_DoStream_Call {
	_c.Call.Return(valkeyResultStream)
	return _c
}

func (_c *MockValkeyClient_DoStream_Call) RunAndReturn(run func(ctx context.Context, cmd valkey.Completed) valkey.ValkeyResultStream) *MockValkeyClient_DoStream_Call {
	_c.Call.Return(run)
	return _c
}

// Mode provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) Mode() valkey.ClientMode {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Mode")
	}

	var r0 valkey.ClientMode
	if returnFunc, ok := ret.Get(0).(func() valkey.ClientMode); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(valkey.ClientMode)
	}
	return r0
}

// MockValkeyClient_Mode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mode'
type MockValkeyClient_Mode_Call struct {
	*mock.Call
}

// Mode is a helper method to define mock.On call
func (_e *MockValkeyClient_Expecter) Mode() *MockValkeyClient_Mode_Call {
	return &MockValkeyClient_Mode_Call{Call: _e.mock.On("Mode")}
}

func (_c *MockValkeyClient_Mode_Call) Run(run func()) *MockValkeyClient_Mode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValkeyClient_Mode_Call) Return(clientMode valkey.ClientMode) *MockValkeyClient_Mode_Call {
	_c.Call.Return(clientMode)
	return _c
}

func (_c *MockValkeyClient_Mode_Call) RunAndReturn(run func() valkey.ClientMode) *MockValkeyClient_Mode_Call {
	_c.Call.Return(run)
	return _c
}

// Nodes provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) Nodes() map[string]valkey.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Nodes")
	}

	var r0 map[string]valkey.Client
	if returnFunc, ok := ret.Get(0).(func() map[string]valkey.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]valkey.Client)
		}
	}
	return r0
}

// MockValkeyClient_Nodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nodes'
type MockValkeyClient_Nodes_Call struct {
	*mock.Call
}

// Nodes is a helper method to define mock.On call
func (_e *MockValkeyClient_Expecter) Nodes() *MockValkeyClient_Nodes_Call {
	return &MockValkeyClient_Nodes_Call{Call: _e.mock.On("Nodes")}
}

func (_c *MockValkeyClient_Nodes_Call) Run(run func()) *MockValkeyClient_Nodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValkeyClient_Nodes_Call) Return(stringToClient map[string]valkey.Client) *MockValkeyClient_Nodes_Call {
	_c.Call.Return(stringToClient)
	return _c
}

func (_c *MockValkeyClient_Nodes_Call) RunAndReturn(run func() map[string]valkey.Client) *MockValkeyClient_Nodes_Call {
	_c.Call.Return(run)
	return _c
}

// Receive provides a mock function for the type MockValkeyClient
func (_mock *MockValkeyClient) Receive(ctx context.Context, subscribe valkey.Completed, fn func(msg valkey.PubSubMessage)) error {
	ret := _mock.Called(ctx, subscribe, fn)

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, valkey.Completed, func(msg valkey.PubSubMessage)) error); ok {
		r0 = returnFunc(ctx, subscribe, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValkeyClient_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type MockValkeyClient_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
//   - ctx context.Context
//   - subscribe valkey.Completed
//   - fn func(msg valkey.PubSubMessage)
func (_e *MockValkeyClient_Expecter) Receive(ctx interface{}, subscribe interface{}, fn interface{}) *MockValkeyClient_Receive_Call {
	return &MockValkeyClient_Receive_Call{Call: _e.mock.On("Receive", ctx, subscribe, fn)}
}

func (_c *MockValkeyClient_Receive_Call) Run(run func(ctx context.Context, subscribe valkey.Completed, fn func(msg valkey.PubSubMessage))) *MockValkeyClient_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 valkey.Completed
		if args[1] != nil {
			arg1 = args[1].(valkey.Completed)
		}
		var arg2 func(msg valkey.PubSubMessage)
		if args[2] != nil {
			arg2 = args[2].(func(msg valkey.PubSubMessage))
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockValkeyClient_Receive_Call) Return(err error) *MockValkeyClient_Receive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValkeyClient_Receive_Call) RunAndReturn(run func(ctx context.Context, subscribe valkey.Completed, fn func(msg valkey.PubSubMessage)) error) *MockValkeyClient_Receive_Call {
	_c.Call.Return(run)
	return _c
}
