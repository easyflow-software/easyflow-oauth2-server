// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"easyflow-oauth2-server/pkg/database"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// AssignRoleToUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) AssignRoleToUser(ctx context.Context, arg database.AssignRoleToUserParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AssignRoleToUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.AssignRoleToUserParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_AssignRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRoleToUser'
type MockQuerier_AssignRoleToUser_Call struct {
	*mock.Call
}

// AssignRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.AssignRoleToUserParams
func (_e *MockQuerier_Expecter) AssignRoleToUser(ctx interface{}, arg interface{}) *MockQuerier_AssignRoleToUser_Call {
	return &MockQuerier_AssignRoleToUser_Call{Call: _e.mock.On("AssignRoleToUser", ctx, arg)}
}

func (_c *MockQuerier_AssignRoleToUser_Call) Run(run func(ctx context.Context, arg database.AssignRoleToUserParams)) *MockQuerier_AssignRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.AssignRoleToUserParams
		if args[1] != nil {
			arg1 = args[1].(database.AssignRoleToUserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_AssignRoleToUser_Call) Return(err error) *MockQuerier_AssignRoleToUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_AssignRoleToUser_Call) RunAndReturn(run func(ctx context.Context, arg database.AssignRoleToUserParams) error) *MockQuerier_AssignRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AssignScopeToRole provides a mock function for the type MockQuerier
func (_mock *MockQuerier) AssignScopeToRole(ctx context.Context, arg database.AssignScopeToRoleParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AssignScopeToRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.AssignScopeToRoleParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_AssignScopeToRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignScopeToRole'
type MockQuerier_AssignScopeToRole_Call struct {
	*mock.Call
}

// AssignScopeToRole is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.AssignScopeToRoleParams
func (_e *MockQuerier_Expecter) AssignScopeToRole(ctx interface{}, arg interface{}) *MockQuerier_AssignScopeToRole_Call {
	return &MockQuerier_AssignScopeToRole_Call{Call: _e.mock.On("AssignScopeToRole", ctx, arg)}
}

func (_c *MockQuerier_AssignScopeToRole_Call) Run(run func(ctx context.Context, arg database.AssignScopeToRoleParams)) *MockQuerier_AssignScopeToRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.AssignScopeToRoleParams
		if args[1] != nil {
			arg1 = args[1].(database.AssignScopeToRoleParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_AssignScopeToRole_Call) Return(err error) *MockQuerier_AssignScopeToRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_AssignScopeToRole_Call) RunAndReturn(run func(ctx context.Context, arg database.AssignScopeToRoleParams) error) *MockQuerier_AssignScopeToRole_Call {
	_c.Call.Return(run)
	return _c
}

// ClientIDExists provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ClientIDExists(ctx context.Context, clientID string) (bool, error) {
	ret := _mock.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for ClientIDExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, clientID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, clientID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ClientIDExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientIDExists'
type MockQuerier_ClientIDExists_Call struct {
	*mock.Call
}

// ClientIDExists is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
func (_e *MockQuerier_Expecter) ClientIDExists(ctx interface{}, clientID interface{}) *MockQuerier_ClientIDExists_Call {
	return &MockQuerier_ClientIDExists_Call{Call: _e.mock.On("ClientIDExists", ctx, clientID)}
}

func (_c *MockQuerier_ClientIDExists_Call) Run(run func(ctx context.Context, clientID string)) *MockQuerier_ClientIDExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_ClientIDExists_Call) Return(b bool, err error) *MockQuerier_ClientIDExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockQuerier_ClientIDExists_Call) RunAndReturn(run func(ctx context.Context, clientID string) (bool, error)) *MockQuerier_ClientIDExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOAuthClient provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateOAuthClient(ctx context.Context, arg database.CreateOAuthClientParams) (database.CreateOAuthClientRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateOAuthClient")
	}

	var r0 database.CreateOAuthClientRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.CreateOAuthClientParams) (database.CreateOAuthClientRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.CreateOAuthClientParams) database.CreateOAuthClientRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.CreateOAuthClientRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.CreateOAuthClientParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateOAuthClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOAuthClient'
type MockQuerier_CreateOAuthClient_Call struct {
	*mock.Call
}

// CreateOAuthClient is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateOAuthClientParams
func (_e *MockQuerier_Expecter) CreateOAuthClient(ctx interface{}, arg interface{}) *MockQuerier_CreateOAuthClient_Call {
	return &MockQuerier_CreateOAuthClient_Call{Call: _e.mock.On("CreateOAuthClient", ctx, arg)}
}

func (_c *MockQuerier_CreateOAuthClient_Call) Run(run func(ctx context.Context, arg database.CreateOAuthClientParams)) *MockQuerier_CreateOAuthClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.CreateOAuthClientParams
		if args[1] != nil {
			arg1 = args[1].(database.CreateOAuthClientParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CreateOAuthClient_Call) Return(createOAuthClientRow database.CreateOAuthClientRow, err error) *MockQuerier_CreateOAuthClient_Call {
	_c.Call.Return(createOAuthClientRow, err)
	return _c
}

func (_c *MockQuerier_CreateOAuthClient_Call) RunAndReturn(run func(ctx context.Context, arg database.CreateOAuthClientParams) (database.CreateOAuthClientRow, error)) *MockQuerier_CreateOAuthClient_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateRole(ctx context.Context, arg database.CreateRoleParams) (database.CreateRoleRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 database.CreateRoleRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.CreateRoleParams) (database.CreateRoleRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.CreateRoleParams) database.CreateRoleRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.CreateRoleRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.CreateRoleParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type MockQuerier_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateRoleParams
func (_e *MockQuerier_Expecter) CreateRole(ctx interface{}, arg interface{}) *MockQuerier_CreateRole_Call {
	return &MockQuerier_CreateRole_Call{Call: _e.mock.On("CreateRole", ctx, arg)}
}

func (_c *MockQuerier_CreateRole_Call) Run(run func(ctx context.Context, arg database.CreateRoleParams)) *MockQuerier_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.CreateRoleParams
		if args[1] != nil {
			arg1 = args[1].(database.CreateRoleParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CreateRole_Call) Return(createRoleRow database.CreateRoleRow, err error) *MockQuerier_CreateRole_Call {
	_c.Call.Return(createRoleRow, err)
	return _c
}

func (_c *MockQuerier_CreateRole_Call) RunAndReturn(run func(ctx context.Context, arg database.CreateRoleParams) (database.CreateRoleRow, error)) *MockQuerier_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScope provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateScope(ctx context.Context, arg database.CreateScopeParams) (database.CreateScopeRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateScope")
	}

	var r0 database.CreateScopeRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.CreateScopeParams) (database.CreateScopeRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.CreateScopeParams) database.CreateScopeRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.CreateScopeRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.CreateScopeParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScope'
type MockQuerier_CreateScope_Call struct {
	*mock.Call
}

// CreateScope is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateScopeParams
func (_e *MockQuerier_Expecter) CreateScope(ctx interface{}, arg interface{}) *MockQuerier_CreateScope_Call {
	return &MockQuerier_CreateScope_Call{Call: _e.mock.On("CreateScope", ctx, arg)}
}

func (_c *MockQuerier_CreateScope_Call) Run(run func(ctx context.Context, arg database.CreateScopeParams)) *MockQuerier_CreateScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.CreateScopeParams
		if args[1] != nil {
			arg1 = args[1].(database.CreateScopeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CreateScope_Call) Return(createScopeRow database.CreateScopeRow, err error) *MockQuerier_CreateScope_Call {
	_c.Call.Return(createScopeRow, err)
	return _c
}

func (_c *MockQuerier_CreateScope_Call) RunAndReturn(run func(ctx context.Context, arg database.CreateScopeParams) (database.CreateScopeRow, error)) *MockQuerier_CreateScope_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateUser(ctx context.Context, arg database.CreateUserParams) (database.CreateUserRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 database.CreateUserRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) (database.CreateUserRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) database.CreateUserRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.CreateUserRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.CreateUserParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockQuerier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateUserParams
func (_e *MockQuerier_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockQuerier_CreateUser_Call {
	return &MockQuerier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockQuerier_CreateUser_Call) Run(run func(ctx context.Context, arg database.CreateUserParams)) *MockQuerier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.CreateUserParams
		if args[1] != nil {
			arg1 = args[1].(database.CreateUserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CreateUser_Call) Return(createUserRow database.CreateUserRow, err error) *MockQuerier_CreateUser_Call {
	_c.Call.Return(createUserRow, err)
	return _c
}

func (_c *MockQuerier_CreateUser_Call) RunAndReturn(run func(ctx context.Context, arg database.CreateUserParams) (database.CreateUserRow, error)) *MockQuerier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOAuthClient provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteOAuthClient(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOAuthClient")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteOAuthClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOAuthClient'
type MockQuerier_DeleteOAuthClient_Call struct {
	*mock.Call
}

// DeleteOAuthClient is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) DeleteOAuthClient(ctx interface{}, id interface{}) *MockQuerier_DeleteOAuthClient_Call {
	return &MockQuerier_DeleteOAuthClient_Call{Call: _e.mock.On("DeleteOAuthClient", ctx, id)}
}

func (_c *MockQuerier_DeleteOAuthClient_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_DeleteOAuthClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DeleteOAuthClient_Call) Return(err error) *MockQuerier_DeleteOAuthClient_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteOAuthClient_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockQuerier_DeleteOAuthClient_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteRole(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type MockQuerier_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) DeleteRole(ctx interface{}, id interface{}) *MockQuerier_DeleteRole_Call {
	return &MockQuerier_DeleteRole_Call{Call: _e.mock.On("DeleteRole", ctx, id)}
}

func (_c *MockQuerier_DeleteRole_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DeleteRole_Call) Return(err error) *MockQuerier_DeleteRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteRole_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockQuerier_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteScope provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteScope(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScope")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScope'
type MockQuerier_DeleteScope_Call struct {
	*mock.Call
}

// DeleteScope is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) DeleteScope(ctx interface{}, id interface{}) *MockQuerier_DeleteScope_Call {
	return &MockQuerier_DeleteScope_Call{Call: _e.mock.On("DeleteScope", ctx, id)}
}

func (_c *MockQuerier_DeleteScope_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_DeleteScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DeleteScope_Call) Return(err error) *MockQuerier_DeleteScope_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteScope_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockQuerier_DeleteScope_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteUser(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockQuerier_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockQuerier_DeleteUser_Call {
	return &MockQuerier_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockQuerier_DeleteUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DeleteUser_Call) Return(err error) *MockQuerier_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockQuerier_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// EmailExists provides a mock function for the type MockQuerier
func (_mock *MockQuerier) EmailExists(ctx context.Context, email string) (bool, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for EmailExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_EmailExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmailExists'
type MockQuerier_EmailExists_Call struct {
	*mock.Call
}

// EmailExists is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockQuerier_Expecter) EmailExists(ctx interface{}, email interface{}) *MockQuerier_EmailExists_Call {
	return &MockQuerier_EmailExists_Call{Call: _e.mock.On("EmailExists", ctx, email)}
}

func (_c *MockQuerier_EmailExists_Call) Run(run func(ctx context.Context, email string)) *MockQuerier_EmailExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_EmailExists_Call) Return(b bool, err error) *MockQuerier_EmailExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockQuerier_EmailExists_Call) RunAndReturn(run func(ctx context.Context, email string) (bool, error)) *MockQuerier_EmailExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetOAuthClient provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetOAuthClient(ctx context.Context, id uuid.UUID) (database.GetOAuthClientRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuthClient")
	}

	var r0 database.GetOAuthClientRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (database.GetOAuthClientRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) database.GetOAuthClientRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(database.GetOAuthClientRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetOAuthClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuthClient'
type MockQuerier_GetOAuthClient_Call struct {
	*mock.Call
}

// GetOAuthClient is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) GetOAuthClient(ctx interface{}, id interface{}) *MockQuerier_GetOAuthClient_Call {
	return &MockQuerier_GetOAuthClient_Call{Call: _e.mock.On("GetOAuthClient", ctx, id)}
}

func (_c *MockQuerier_GetOAuthClient_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_GetOAuthClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetOAuthClient_Call) Return(getOAuthClientRow database.GetOAuthClientRow, err error) *MockQuerier_GetOAuthClient_Call {
	_c.Call.Return(getOAuthClientRow, err)
	return _c
}

func (_c *MockQuerier_GetOAuthClient_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (database.GetOAuthClientRow, error)) *MockQuerier_GetOAuthClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetOAuthClientByClientID provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetOAuthClientByClientID(ctx context.Context, clientID string) (database.GetOAuthClientByClientIDRow, error) {
	ret := _mock.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuthClientByClientID")
	}

	var r0 database.GetOAuthClientByClientIDRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (database.GetOAuthClientByClientIDRow, error)); ok {
		return returnFunc(ctx, clientID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) database.GetOAuthClientByClientIDRow); ok {
		r0 = returnFunc(ctx, clientID)
	} else {
		r0 = ret.Get(0).(database.GetOAuthClientByClientIDRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetOAuthClientByClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuthClientByClientID'
type MockQuerier_GetOAuthClientByClientID_Call struct {
	*mock.Call
}

// GetOAuthClientByClientID is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
func (_e *MockQuerier_Expecter) GetOAuthClientByClientID(ctx interface{}, clientID interface{}) *MockQuerier_GetOAuthClientByClientID_Call {
	return &MockQuerier_GetOAuthClientByClientID_Call{Call: _e.mock.On("GetOAuthClientByClientID", ctx, clientID)}
}

func (_c *MockQuerier_GetOAuthClientByClientID_Call) Run(run func(ctx context.Context, clientID string)) *MockQuerier_GetOAuthClientByClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetOAuthClientByClientID_Call) Return(getOAuthClientByClientIDRow database.GetOAuthClientByClientIDRow, err error) *MockQuerier_GetOAuthClientByClientID_Call {
	_c.Call.Return(getOAuthClientByClientIDRow, err)
	return _c
}

func (_c *MockQuerier_GetOAuthClientByClientID_Call) RunAndReturn(run func(ctx context.Context, clientID string) (database.GetOAuthClientByClientIDRow, error)) *MockQuerier_GetOAuthClientByClientID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRole provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetRole(ctx context.Context, id uuid.UUID) (database.GetRoleRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRole")
	}

	var r0 database.GetRoleRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (database.GetRoleRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) database.GetRoleRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(database.GetRoleRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type MockQuerier_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) GetRole(ctx interface{}, id interface{}) *MockQuerier_GetRole_Call {
	return &MockQuerier_GetRole_Call{Call: _e.mock.On("GetRole", ctx, id)}
}

func (_c *MockQuerier_GetRole_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetRole_Call) Return(getRoleRow database.GetRoleRow, err error) *MockQuerier_GetRole_Call {
	_c.Call.Return(getRoleRow, err)
	return _c
}

func (_c *MockQuerier_GetRole_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (database.GetRoleRow, error)) *MockQuerier_GetRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleByName provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetRoleByName(ctx context.Context, name string) (database.GetRoleByNameRow, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByName")
	}

	var r0 database.GetRoleByNameRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (database.GetRoleByNameRow, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) database.GetRoleByNameRow); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(database.GetRoleByNameRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetRoleByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleByName'
type MockQuerier_GetRoleByName_Call struct {
	*mock.Call
}

// GetRoleByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuerier_Expecter) GetRoleByName(ctx interface{}, name interface{}) *MockQuerier_GetRoleByName_Call {
	return &MockQuerier_GetRoleByName_Call{Call: _e.mock.On("GetRoleByName", ctx, name)}
}

func (_c *MockQuerier_GetRoleByName_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_GetRoleByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetRoleByName_Call) Return(getRoleByNameRow database.GetRoleByNameRow, err error) *MockQuerier_GetRoleByName_Call {
	_c.Call.Return(getRoleByNameRow, err)
	return _c
}

func (_c *MockQuerier_GetRoleByName_Call) RunAndReturn(run func(ctx context.Context, name string) (database.GetRoleByNameRow, error)) *MockQuerier_GetRoleByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleWithScopes provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetRoleWithScopes(ctx context.Context, id uuid.UUID) (database.GetRoleWithScopesRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleWithScopes")
	}

	var r0 database.GetRoleWithScopesRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (database.GetRoleWithScopesRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) database.GetRoleWithScopesRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(database.GetRoleWithScopesRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetRoleWithScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleWithScopes'
type MockQuerier_GetRoleWithScopes_Call struct {
	*mock.Call
}

// GetRoleWithScopes is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) GetRoleWithScopes(ctx interface{}, id interface{}) *MockQuerier_GetRoleWithScopes_Call {
	return &MockQuerier_GetRoleWithScopes_Call{Call: _e.mock.On("GetRoleWithScopes", ctx, id)}
}

func (_c *MockQuerier_GetRoleWithScopes_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_GetRoleWithScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetRoleWithScopes_Call) Return(getRoleWithScopesRow database.GetRoleWithScopesRow, err error) *MockQuerier_GetRoleWithScopes_Call {
	_c.Call.Return(getRoleWithScopesRow, err)
	return _c
}

func (_c *MockQuerier_GetRoleWithScopes_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (database.GetRoleWithScopesRow, error)) *MockQuerier_GetRoleWithScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolesWithScope provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetRolesWithScope(ctx context.Context, scopeID uuid.UUID) ([]database.GetRolesWithScopeRow, error) {
	ret := _mock.Called(ctx, scopeID)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesWithScope")
	}

	var r0 []database.GetRolesWithScopeRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]database.GetRolesWithScopeRow, error)); ok {
		return returnFunc(ctx, scopeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []database.GetRolesWithScopeRow); ok {
		r0 = returnFunc(ctx, scopeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetRolesWithScopeRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, scopeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetRolesWithScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesWithScope'
type MockQuerier_GetRolesWithScope_Call struct {
	*mock.Call
}

// GetRolesWithScope is a helper method to define mock.On call
//   - ctx context.Context
//   - scopeID uuid.UUID
func (_e *MockQuerier_Expecter) GetRolesWithScope(ctx interface{}, scopeID interface{}) *MockQuerier_GetRolesWithScope_Call {
	return &MockQuerier_GetRolesWithScope_Call{Call: _e.mock.On("GetRolesWithScope", ctx, scopeID)}
}

func (_c *MockQuerier_GetRolesWithScope_Call) Run(run func(ctx context.Context, scopeID uuid.UUID)) *MockQuerier_GetRolesWithScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetRolesWithScope_Call) Return(getRolesWithScopeRows []database.GetRolesWithScopeRow, err error) *MockQuerier_GetRolesWithScope_Call {
	_c.Call.Return(getRolesWithScopeRows, err)
	return _c
}

func (_c *MockQuerier_GetRolesWithScope_Call) RunAndReturn(run func(ctx context.Context, scopeID uuid.UUID) ([]database.GetRolesWithScopeRow, error)) *MockQuerier_GetRolesWithScope_Call {
	_c.Call.Return(run)
	return _c
}

// GetScope provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetScope(ctx context.Context, id uuid.UUID) (database.GetScopeRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetScope")
	}

	var r0 database.GetScopeRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (database.GetScopeRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) database.GetScopeRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(database.GetScopeRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScope'
type MockQuerier_GetScope_Call struct {
	*mock.Call
}

// GetScope is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) GetScope(ctx interface{}, id interface{}) *MockQuerier_GetScope_Call {
	return &MockQuerier_GetScope_Call{Call: _e.mock.On("GetScope", ctx, id)}
}

func (_c *MockQuerier_GetScope_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_GetScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetScope_Call) Return(getScopeRow database.GetScopeRow, err error) *MockQuerier_GetScope_Call {
	_c.Call.Return(getScopeRow, err)
	return _c
}

func (_c *MockQuerier_GetScope_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (database.GetScopeRow, error)) *MockQuerier_GetScope_Call {
	_c.Call.Return(run)
	return _c
}

// GetScopeByName provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetScopeByName(ctx context.Context, name string) (database.GetScopeByNameRow, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetScopeByName")
	}

	var r0 database.GetScopeByNameRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (database.GetScopeByNameRow, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) database.GetScopeByNameRow); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(database.GetScopeByNameRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetScopeByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScopeByName'
type MockQuerier_GetScopeByName_Call struct {
	*mock.Call
}

// GetScopeByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuerier_Expecter) GetScopeByName(ctx interface{}, name interface{}) *MockQuerier_GetScopeByName_Call {
	return &MockQuerier_GetScopeByName_Call{Call: _e.mock.On("GetScopeByName", ctx, name)}
}

func (_c *MockQuerier_GetScopeByName_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_GetScopeByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetScopeByName_Call) Return(getScopeByNameRow database.GetScopeByNameRow, err error) *MockQuerier_GetScopeByName_Call {
	_c.Call.Return(getScopeByNameRow, err)
	return _c
}

func (_c *MockQuerier_GetScopeByName_Call) RunAndReturn(run func(ctx context.Context, name string) (database.GetScopeByNameRow, error)) *MockQuerier_GetScopeByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetScopesForRole provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetScopesForRole(ctx context.Context, roleID uuid.UUID) ([]database.GetScopesForRoleRow, error) {
	ret := _mock.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetScopesForRole")
	}

	var r0 []database.GetScopesForRoleRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]database.GetScopesForRoleRow, error)); ok {
		return returnFunc(ctx, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []database.GetScopesForRoleRow); ok {
		r0 = returnFunc(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetScopesForRoleRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetScopesForRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScopesForRole'
type MockQuerier_GetScopesForRole_Call struct {
	*mock.Call
}

// GetScopesForRole is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID uuid.UUID
func (_e *MockQuerier_Expecter) GetScopesForRole(ctx interface{}, roleID interface{}) *MockQuerier_GetScopesForRole_Call {
	return &MockQuerier_GetScopesForRole_Call{Call: _e.mock.On("GetScopesForRole", ctx, roleID)}
}

func (_c *MockQuerier_GetScopesForRole_Call) Run(run func(ctx context.Context, roleID uuid.UUID)) *MockQuerier_GetScopesForRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetScopesForRole_Call) Return(getScopesForRoleRows []database.GetScopesForRoleRow, err error) *MockQuerier_GetScopesForRole_Call {
	_c.Call.Return(getScopesForRoleRows, err)
	return _c
}

func (_c *MockQuerier_GetScopesForRole_Call) RunAndReturn(run func(ctx context.Context, roleID uuid.UUID) ([]database.GetScopesForRoleRow, error)) *MockQuerier_GetScopesForRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUser(ctx context.Context, id uuid.UUID) (database.GetUserRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 database.GetUserRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (database.GetUserRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) database.GetUserRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(database.GetUserRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockQuerier_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) GetUser(ctx interface{}, id interface{}) *MockQuerier_GetUser_Call {
	return &MockQuerier_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockQuerier_GetUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetUser_Call) Return(getUserRow database.GetUserRow, err error) *MockQuerier_GetUser_Call {
	_c.Call.Return(getUserRow, err)
	return _c
}

func (_c *MockQuerier_GetUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (database.GetUserRow, error)) *MockQuerier_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserByEmail(ctx context.Context, email string) (database.GetUserByEmailRow, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 database.GetUserByEmailRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (database.GetUserByEmailRow, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) database.GetUserByEmailRow); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(database.GetUserByEmailRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockQuerier_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockQuerier_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockQuerier_GetUserByEmail_Call {
	return &MockQuerier_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockQuerier_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) Return(getUserByEmailRow database.GetUserByEmailRow, err error) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(getUserByEmailRow, err)
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (database.GetUserByEmailRow, error)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserRoles(ctx context.Context, userID uuid.UUID) ([]database.GetUserRolesRow, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []database.GetUserRolesRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]database.GetUserRolesRow, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []database.GetUserRolesRow); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetUserRolesRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type MockQuerier_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockQuerier_Expecter) GetUserRoles(ctx interface{}, userID interface{}) *MockQuerier_GetUserRoles_Call {
	return &MockQuerier_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID)}
}

func (_c *MockQuerier_GetUserRoles_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockQuerier_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetUserRoles_Call) Return(getUserRolesRows []database.GetUserRolesRow, err error) *MockQuerier_GetUserRoles_Call {
	_c.Call.Return(getUserRolesRows, err)
	return _c
}

func (_c *MockQuerier_GetUserRoles_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) ([]database.GetUserRolesRow, error)) *MockQuerier_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserScopes provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserScopes(ctx context.Context, userID uuid.UUID) ([]string, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserScopes")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]string, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []string); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserScopes'
type MockQuerier_GetUserScopes_Call struct {
	*mock.Call
}

// GetUserScopes is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockQuerier_Expecter) GetUserScopes(ctx interface{}, userID interface{}) *MockQuerier_GetUserScopes_Call {
	return &MockQuerier_GetUserScopes_Call{Call: _e.mock.On("GetUserScopes", ctx, userID)}
}

func (_c *MockQuerier_GetUserScopes_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockQuerier_GetUserScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetUserScopes_Call) Return(strings []string, err error) *MockQuerier_GetUserScopes_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockQuerier_GetUserScopes_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) ([]string, error)) *MockQuerier_GetUserScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWithRolesAndScopes provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserWithRolesAndScopes(ctx context.Context, id uuid.UUID) (database.GetUserWithRolesAndScopesRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithRolesAndScopes")
	}

	var r0 database.GetUserWithRolesAndScopesRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (database.GetUserWithRolesAndScopesRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) database.GetUserWithRolesAndScopesRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(database.GetUserWithRolesAndScopesRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserWithRolesAndScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithRolesAndScopes'
type MockQuerier_GetUserWithRolesAndScopes_Call struct {
	*mock.Call
}

// GetUserWithRolesAndScopes is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) GetUserWithRolesAndScopes(ctx interface{}, id interface{}) *MockQuerier_GetUserWithRolesAndScopes_Call {
	return &MockQuerier_GetUserWithRolesAndScopes_Call{Call: _e.mock.On("GetUserWithRolesAndScopes", ctx, id)}
}

func (_c *MockQuerier_GetUserWithRolesAndScopes_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_GetUserWithRolesAndScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetUserWithRolesAndScopes_Call) Return(getUserWithRolesAndScopesRow database.GetUserWithRolesAndScopesRow, err error) *MockQuerier_GetUserWithRolesAndScopes_Call {
	_c.Call.Return(getUserWithRolesAndScopesRow, err)
	return _c
}

func (_c *MockQuerier_GetUserWithRolesAndScopes_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (database.GetUserWithRolesAndScopesRow, error)) *MockQuerier_GetUserWithRolesAndScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersWithRole provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUsersWithRole(ctx context.Context, roleID uuid.UUID) ([]database.GetUsersWithRoleRow, error) {
	ret := _mock.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersWithRole")
	}

	var r0 []database.GetUsersWithRoleRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]database.GetUsersWithRoleRow, error)); ok {
		return returnFunc(ctx, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []database.GetUsersWithRoleRow); ok {
		r0 = returnFunc(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetUsersWithRoleRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUsersWithRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersWithRole'
type MockQuerier_GetUsersWithRole_Call struct {
	*mock.Call
}

// GetUsersWithRole is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID uuid.UUID
func (_e *MockQuerier_Expecter) GetUsersWithRole(ctx interface{}, roleID interface{}) *MockQuerier_GetUsersWithRole_Call {
	return &MockQuerier_GetUsersWithRole_Call{Call: _e.mock.On("GetUsersWithRole", ctx, roleID)}
}

func (_c *MockQuerier_GetUsersWithRole_Call) Run(run func(ctx context.Context, roleID uuid.UUID)) *MockQuerier_GetUsersWithRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetUsersWithRole_Call) Return(getUsersWithRoleRows []database.GetUsersWithRoleRow, err error) *MockQuerier_GetUsersWithRole_Call {
	_c.Call.Return(getUsersWithRoleRows, err)
	return _c
}

func (_c *MockQuerier_GetUsersWithRole_Call) RunAndReturn(run func(ctx context.Context, roleID uuid.UUID) ([]database.GetUsersWithRoleRow, error)) *MockQuerier_GetUsersWithRole_Call {
	_c.Call.Return(run)
	return _c
}

// ListOAuthClients provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListOAuthClients(ctx context.Context) ([]database.ListOAuthClientsRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOAuthClients")
	}

	var r0 []database.ListOAuthClientsRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]database.ListOAuthClientsRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []database.ListOAuthClientsRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.ListOAuthClientsRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListOAuthClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOAuthClients'
type MockQuerier_ListOAuthClients_Call struct {
	*mock.Call
}

// ListOAuthClients is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ListOAuthClients(ctx interface{}) *MockQuerier_ListOAuthClients_Call {
	return &MockQuerier_ListOAuthClients_Call{Call: _e.mock.On("ListOAuthClients", ctx)}
}

func (_c *MockQuerier_ListOAuthClients_Call) Run(run func(ctx context.Context)) *MockQuerier_ListOAuthClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_ListOAuthClients_Call) Return(listOAuthClientsRows []database.ListOAuthClientsRow, err error) *MockQuerier_ListOAuthClients_Call {
	_c.Call.Return(listOAuthClientsRows, err)
	return _c
}

func (_c *MockQuerier_ListOAuthClients_Call) RunAndReturn(run func(ctx context.Context) ([]database.ListOAuthClientsRow, error)) *MockQuerier_ListOAuthClients_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListRoles(ctx context.Context) ([]database.ListRolesRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 []database.ListRolesRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]database.ListRolesRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []database.ListRolesRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.ListRolesRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockQuerier_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ListRoles(ctx interface{}) *MockQuerier_ListRoles_Call {
	return &MockQuerier_ListRoles_Call{Call: _e.mock.On("ListRoles", ctx)}
}

func (_c *MockQuerier_ListRoles_Call) Run(run func(ctx context.Context)) *MockQuerier_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_ListRoles_Call) Return(listRolesRows []database.ListRolesRow, err error) *MockQuerier_ListRoles_Call {
	_c.Call.Return(listRolesRows, err)
	return _c
}

func (_c *MockQuerier_ListRoles_Call) RunAndReturn(run func(ctx context.Context) ([]database.ListRolesRow, error)) *MockQuerier_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListScopes provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListScopes(ctx context.Context) ([]database.ListScopesRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListScopes")
	}

	var r0 []database.ListScopesRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]database.ListScopesRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []database.ListScopesRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.ListScopesRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListScopes'
type MockQuerier_ListScopes_Call struct {
	*mock.Call
}

// ListScopes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ListScopes(ctx interface{}) *MockQuerier_ListScopes_Call {
	return &MockQuerier_ListScopes_Call{Call: _e.mock.On("ListScopes", ctx)}
}

func (_c *MockQuerier_ListScopes_Call) Run(run func(ctx context.Context)) *MockQuerier_ListScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_ListScopes_Call) Return(listScopesRows []database.ListScopesRow, err error) *MockQuerier_ListScopes_Call {
	_c.Call.Return(listScopesRows, err)
	return _c
}

func (_c *MockQuerier_ListScopes_Call) RunAndReturn(run func(ctx context.Context) ([]database.ListScopesRow, error)) *MockQuerier_ListScopes_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListUsers(ctx context.Context, arg database.ListUsersParams) ([]database.ListUsersRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []database.ListUsersRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.ListUsersParams) ([]database.ListUsersRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.ListUsersParams) []database.ListUsersRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.ListUsersRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.ListUsersParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockQuerier_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.ListUsersParams
func (_e *MockQuerier_Expecter) ListUsers(ctx interface{}, arg interface{}) *MockQuerier_ListUsers_Call {
	return &MockQuerier_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, arg)}
}

func (_c *MockQuerier_ListUsers_Call) Run(run func(ctx context.Context, arg database.ListUsersParams)) *MockQuerier_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.ListUsersParams
		if args[1] != nil {
			arg1 = args[1].(database.ListUsersParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_ListUsers_Call) Return(listUsersRows []database.ListUsersRow, err error) *MockQuerier_ListUsers_Call {
	_c.Call.Return(listUsersRows, err)
	return _c
}

func (_c *MockQuerier_ListUsers_Call) RunAndReturn(run func(ctx context.Context, arg database.ListUsersParams) ([]database.ListUsersRow, error)) *MockQuerier_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllRolesFromUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) RemoveAllRolesFromUser(ctx context.Context, userID uuid.UUID) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllRolesFromUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_RemoveAllRolesFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllRolesFromUser'
type MockQuerier_RemoveAllRolesFromUser_Call struct {
	*mock.Call
}

// RemoveAllRolesFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockQuerier_Expecter) RemoveAllRolesFromUser(ctx interface{}, userID interface{}) *MockQuerier_RemoveAllRolesFromUser_Call {
	return &MockQuerier_RemoveAllRolesFromUser_Call{Call: _e.mock.On("RemoveAllRolesFromUser", ctx, userID)}
}

func (_c *MockQuerier_RemoveAllRolesFromUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockQuerier_RemoveAllRolesFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_RemoveAllRolesFromUser_Call) Return(err error) *MockQuerier_RemoveAllRolesFromUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_RemoveAllRolesFromUser_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) error) *MockQuerier_RemoveAllRolesFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllScopesFromRole provides a mock function for the type MockQuerier
func (_mock *MockQuerier) RemoveAllScopesFromRole(ctx context.Context, roleID uuid.UUID) error {
	ret := _mock.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllScopesFromRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, roleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_RemoveAllScopesFromRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllScopesFromRole'
type MockQuerier_RemoveAllScopesFromRole_Call struct {
	*mock.Call
}

// RemoveAllScopesFromRole is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID uuid.UUID
func (_e *MockQuerier_Expecter) RemoveAllScopesFromRole(ctx interface{}, roleID interface{}) *MockQuerier_RemoveAllScopesFromRole_Call {
	return &MockQuerier_RemoveAllScopesFromRole_Call{Call: _e.mock.On("RemoveAllScopesFromRole", ctx, roleID)}
}

func (_c *MockQuerier_RemoveAllScopesFromRole_Call) Run(run func(ctx context.Context, roleID uuid.UUID)) *MockQuerier_RemoveAllScopesFromRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_RemoveAllScopesFromRole_Call) Return(err error) *MockQuerier_RemoveAllScopesFromRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_RemoveAllScopesFromRole_Call) RunAndReturn(run func(ctx context.Context, roleID uuid.UUID) error) *MockQuerier_RemoveAllScopesFromRole_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoleFromUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) RemoveRoleFromUser(ctx context.Context, arg database.RemoveRoleFromUserParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoleFromUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.RemoveRoleFromUserParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_RemoveRoleFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoleFromUser'
type MockQuerier_RemoveRoleFromUser_Call struct {
	*mock.Call
}

// RemoveRoleFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.RemoveRoleFromUserParams
func (_e *MockQuerier_Expecter) RemoveRoleFromUser(ctx interface{}, arg interface{}) *MockQuerier_RemoveRoleFromUser_Call {
	return &MockQuerier_RemoveRoleFromUser_Call{Call: _e.mock.On("RemoveRoleFromUser", ctx, arg)}
}

func (_c *MockQuerier_RemoveRoleFromUser_Call) Run(run func(ctx context.Context, arg database.RemoveRoleFromUserParams)) *MockQuerier_RemoveRoleFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.RemoveRoleFromUserParams
		if args[1] != nil {
			arg1 = args[1].(database.RemoveRoleFromUserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_RemoveRoleFromUser_Call) Return(err error) *MockQuerier_RemoveRoleFromUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_RemoveRoleFromUser_Call) RunAndReturn(run func(ctx context.Context, arg database.RemoveRoleFromUserParams) error) *MockQuerier_RemoveRoleFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveScopeFromRole provides a mock function for the type MockQuerier
func (_mock *MockQuerier) RemoveScopeFromRole(ctx context.Context, arg database.RemoveScopeFromRoleParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RemoveScopeFromRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.RemoveScopeFromRoleParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_RemoveScopeFromRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveScopeFromRole'
type MockQuerier_RemoveScopeFromRole_Call struct {
	*mock.Call
}

// RemoveScopeFromRole is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.RemoveScopeFromRoleParams
func (_e *MockQuerier_Expecter) RemoveScopeFromRole(ctx interface{}, arg interface{}) *MockQuerier_RemoveScopeFromRole_Call {
	return &MockQuerier_RemoveScopeFromRole_Call{Call: _e.mock.On("RemoveScopeFromRole", ctx, arg)}
}

func (_c *MockQuerier_RemoveScopeFromRole_Call) Run(run func(ctx context.Context, arg database.RemoveScopeFromRoleParams)) *MockQuerier_RemoveScopeFromRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.RemoveScopeFromRoleParams
		if args[1] != nil {
			arg1 = args[1].(database.RemoveScopeFromRoleParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_RemoveScopeFromRole_Call) Return(err error) *MockQuerier_RemoveScopeFromRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_RemoveScopeFromRole_Call) RunAndReturn(run func(ctx context.Context, arg database.RemoveScopeFromRoleParams) error) *MockQuerier_RemoveScopeFromRole_Call {
	_c.Call.Return(run)
	return _c
}

// RoleHasScope provides a mock function for the type MockQuerier
func (_mock *MockQuerier) RoleHasScope(ctx context.Context, arg database.RoleHasScopeParams) (bool, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RoleHasScope")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.RoleHasScopeParams) (bool, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.RoleHasScopeParams) bool); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.RoleHasScopeParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_RoleHasScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleHasScope'
type MockQuerier_RoleHasScope_Call struct {
	*mock.Call
}

// RoleHasScope is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.RoleHasScopeParams
func (_e *MockQuerier_Expecter) RoleHasScope(ctx interface{}, arg interface{}) *MockQuerier_RoleHasScope_Call {
	return &MockQuerier_RoleHasScope_Call{Call: _e.mock.On("RoleHasScope", ctx, arg)}
}

func (_c *MockQuerier_RoleHasScope_Call) Run(run func(ctx context.Context, arg database.RoleHasScopeParams)) *MockQuerier_RoleHasScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.RoleHasScopeParams
		if args[1] != nil {
			arg1 = args[1].(database.RoleHasScopeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_RoleHasScope_Call) Return(b bool, err error) *MockQuerier_RoleHasScope_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockQuerier_RoleHasScope_Call) RunAndReturn(run func(ctx context.Context, arg database.RoleHasScopeParams) (bool, error)) *MockQuerier_RoleHasScope_Call {
	_c.Call.Return(run)
	return _c
}

// ScopeExistsByName provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ScopeExistsByName(ctx context.Context, name string) (bool, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ScopeExistsByName")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ScopeExistsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScopeExistsByName'
type MockQuerier_ScopeExistsByName_Call struct {
	*mock.Call
}

// ScopeExistsByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuerier_Expecter) ScopeExistsByName(ctx interface{}, name interface{}) *MockQuerier_ScopeExistsByName_Call {
	return &MockQuerier_ScopeExistsByName_Call{Call: _e.mock.On("ScopeExistsByName", ctx, name)}
}

func (_c *MockQuerier_ScopeExistsByName_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_ScopeExistsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_ScopeExistsByName_Call) Return(b bool, err error) *MockQuerier_ScopeExistsByName_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockQuerier_ScopeExistsByName_Call) RunAndReturn(run func(ctx context.Context, name string) (bool, error)) *MockQuerier_ScopeExistsByName_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOAuthClient provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateOAuthClient(ctx context.Context, arg database.UpdateOAuthClientParams) (database.UpdateOAuthClientRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOAuthClient")
	}

	var r0 database.UpdateOAuthClientRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UpdateOAuthClientParams) (database.UpdateOAuthClientRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UpdateOAuthClientParams) database.UpdateOAuthClientRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.UpdateOAuthClientRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.UpdateOAuthClientParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateOAuthClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOAuthClient'
type MockQuerier_UpdateOAuthClient_Call struct {
	*mock.Call
}

// UpdateOAuthClient is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateOAuthClientParams
func (_e *MockQuerier_Expecter) UpdateOAuthClient(ctx interface{}, arg interface{}) *MockQuerier_UpdateOAuthClient_Call {
	return &MockQuerier_UpdateOAuthClient_Call{Call: _e.mock.On("UpdateOAuthClient", ctx, arg)}
}

func (_c *MockQuerier_UpdateOAuthClient_Call) Run(run func(ctx context.Context, arg database.UpdateOAuthClientParams)) *MockQuerier_UpdateOAuthClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.UpdateOAuthClientParams
		if args[1] != nil {
			arg1 = args[1].(database.UpdateOAuthClientParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_UpdateOAuthClient_Call) Return(updateOAuthClientRow database.UpdateOAuthClientRow, err error) *MockQuerier_UpdateOAuthClient_Call {
	_c.Call.Return(updateOAuthClientRow, err)
	return _c
}

func (_c *MockQuerier_UpdateOAuthClient_Call) RunAndReturn(run func(ctx context.Context, arg database.UpdateOAuthClientParams) (database.UpdateOAuthClientRow, error)) *MockQuerier_UpdateOAuthClient_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOAuthClientSecret provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateOAuthClientSecret(ctx context.Context, arg database.UpdateOAuthClientSecretParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOAuthClientSecret")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UpdateOAuthClientSecretParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_UpdateOAuthClientSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOAuthClientSecret'
type MockQuerier_UpdateOAuthClientSecret_Call struct {
	*mock.Call
}

// UpdateOAuthClientSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateOAuthClientSecretParams
func (_e *MockQuerier_Expecter) UpdateOAuthClientSecret(ctx interface{}, arg interface{}) *MockQuerier_UpdateOAuthClientSecret_Call {
	return &MockQuerier_UpdateOAuthClientSecret_Call{Call: _e.mock.On("UpdateOAuthClientSecret", ctx, arg)}
}

func (_c *MockQuerier_UpdateOAuthClientSecret_Call) Run(run func(ctx context.Context, arg database.UpdateOAuthClientSecretParams)) *MockQuerier_UpdateOAuthClientSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.UpdateOAuthClientSecretParams
		if args[1] != nil {
			arg1 = args[1].(database.UpdateOAuthClientSecretParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_UpdateOAuthClientSecret_Call) Return(err error) *MockQuerier_UpdateOAuthClientSecret_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_UpdateOAuthClientSecret_Call) RunAndReturn(run func(ctx context.Context, arg database.UpdateOAuthClientSecretParams) error) *MockQuerier_UpdateOAuthClientSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateRole(ctx context.Context, arg database.UpdateRoleParams) (database.UpdateRoleRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 database.UpdateRoleRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UpdateRoleParams) (database.UpdateRoleRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UpdateRoleParams) database.UpdateRoleRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.UpdateRoleRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.UpdateRoleParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockQuerier_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateRoleParams
func (_e *MockQuerier_Expecter) UpdateRole(ctx interface{}, arg interface{}) *MockQuerier_UpdateRole_Call {
	return &MockQuerier_UpdateRole_Call{Call: _e.mock.On("UpdateRole", ctx, arg)}
}

func (_c *MockQuerier_UpdateRole_Call) Run(run func(ctx context.Context, arg database.UpdateRoleParams)) *MockQuerier_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.UpdateRoleParams
		if args[1] != nil {
			arg1 = args[1].(database.UpdateRoleParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_UpdateRole_Call) Return(updateRoleRow database.UpdateRoleRow, err error) *MockQuerier_UpdateRole_Call {
	_c.Call.Return(updateRoleRow, err)
	return _c
}

func (_c *MockQuerier_UpdateRole_Call) RunAndReturn(run func(ctx context.Context, arg database.UpdateRoleParams) (database.UpdateRoleRow, error)) *MockQuerier_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateScope provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateScope(ctx context.Context, arg database.UpdateScopeParams) (database.UpdateScopeRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScope")
	}

	var r0 database.UpdateScopeRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UpdateScopeParams) (database.UpdateScopeRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UpdateScopeParams) database.UpdateScopeRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.UpdateScopeRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.UpdateScopeParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateScope'
type MockQuerier_UpdateScope_Call struct {
	*mock.Call
}

// UpdateScope is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateScopeParams
func (_e *MockQuerier_Expecter) UpdateScope(ctx interface{}, arg interface{}) *MockQuerier_UpdateScope_Call {
	return &MockQuerier_UpdateScope_Call{Call: _e.mock.On("UpdateScope", ctx, arg)}
}

func (_c *MockQuerier_UpdateScope_Call) Run(run func(ctx context.Context, arg database.UpdateScopeParams)) *MockQuerier_UpdateScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.UpdateScopeParams
		if args[1] != nil {
			arg1 = args[1].(database.UpdateScopeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_UpdateScope_Call) Return(updateScopeRow database.UpdateScopeRow, err error) *MockQuerier_UpdateScope_Call {
	_c.Call.Return(updateScopeRow, err)
	return _c
}

func (_c *MockQuerier_UpdateScope_Call) RunAndReturn(run func(ctx context.Context, arg database.UpdateScopeParams) (database.UpdateScopeRow, error)) *MockQuerier_UpdateScope_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateUser(ctx context.Context, arg database.UpdateUserParams) (database.UpdateUserRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 database.UpdateUserRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UpdateUserParams) (database.UpdateUserRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UpdateUserParams) database.UpdateUserRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.UpdateUserRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.UpdateUserParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockQuerier_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateUserParams
func (_e *MockQuerier_Expecter) UpdateUser(ctx interface{}, arg interface{}) *MockQuerier_UpdateUser_Call {
	return &MockQuerier_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, arg)}
}

func (_c *MockQuerier_UpdateUser_Call) Run(run func(ctx context.Context, arg database.UpdateUserParams)) *MockQuerier_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.UpdateUserParams
		if args[1] != nil {
			arg1 = args[1].(database.UpdateUserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_UpdateUser_Call) Return(updateUserRow database.UpdateUserRow, err error) *MockQuerier_UpdateUser_Call {
	_c.Call.Return(updateUserRow, err)
	return _c
}

func (_c *MockQuerier_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, arg database.UpdateUserParams) (database.UpdateUserRow, error)) *MockQuerier_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPassword provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateUserPassword(ctx context.Context, arg database.UpdateUserPasswordParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UpdateUserPasswordParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type MockQuerier_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateUserPasswordParams
func (_e *MockQuerier_Expecter) UpdateUserPassword(ctx interface{}, arg interface{}) *MockQuerier_UpdateUserPassword_Call {
	return &MockQuerier_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", ctx, arg)}
}

func (_c *MockQuerier_UpdateUserPassword_Call) Run(run func(ctx context.Context, arg database.UpdateUserPasswordParams)) *MockQuerier_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.UpdateUserPasswordParams
		if args[1] != nil {
			arg1 = args[1].(database.UpdateUserPasswordParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_UpdateUserPassword_Call) Return(err error) *MockQuerier_UpdateUserPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_UpdateUserPassword_Call) RunAndReturn(run func(ctx context.Context, arg database.UpdateUserPasswordParams) error) *MockQuerier_UpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UserHasRole provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UserHasRole(ctx context.Context, arg database.UserHasRoleParams) (bool, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UserHasRole")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UserHasRoleParams) (bool, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.UserHasRoleParams) bool); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.UserHasRoleParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UserHasRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHasRole'
type MockQuerier_UserHasRole_Call struct {
	*mock.Call
}

// UserHasRole is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UserHasRoleParams
func (_e *MockQuerier_Expecter) UserHasRole(ctx interface{}, arg interface{}) *MockQuerier_UserHasRole_Call {
	return &MockQuerier_UserHasRole_Call{Call: _e.mock.On("UserHasRole", ctx, arg)}
}

func (_c *MockQuerier_UserHasRole_Call) Run(run func(ctx context.Context, arg database.UserHasRoleParams)) *MockQuerier_UserHasRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.UserHasRoleParams
		if args[1] != nil {
			arg1 = args[1].(database.UserHasRoleParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_UserHasRole_Call) Return(b bool, err error) *MockQuerier_UserHasRole_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockQuerier_UserHasRole_Call) RunAndReturn(run func(ctx context.Context, arg database.UserHasRoleParams) (bool, error)) *MockQuerier_UserHasRole_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRedirectURI provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ValidateRedirectURI(ctx context.Context, arg database.ValidateRedirectURIParams) (bool, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRedirectURI")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.ValidateRedirectURIParams) (bool, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, database.ValidateRedirectURIParams) bool); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, database.ValidateRedirectURIParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ValidateRedirectURI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRedirectURI'
type MockQuerier_ValidateRedirectURI_Call struct {
	*mock.Call
}

// ValidateRedirectURI is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.ValidateRedirectURIParams
func (_e *MockQuerier_Expecter) ValidateRedirectURI(ctx interface{}, arg interface{}) *MockQuerier_ValidateRedirectURI_Call {
	return &MockQuerier_ValidateRedirectURI_Call{Call: _e.mock.On("ValidateRedirectURI", ctx, arg)}
}

func (_c *MockQuerier_ValidateRedirectURI_Call) Run(run func(ctx context.Context, arg database.ValidateRedirectURIParams)) *MockQuerier_ValidateRedirectURI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 database.ValidateRedirectURIParams
		if args[1] != nil {
			arg1 = args[1].(database.ValidateRedirectURIParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_ValidateRedirectURI_Call) Return(b bool, err error) *MockQuerier_ValidateRedirectURI_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockQuerier_ValidateRedirectURI_Call) RunAndReturn(run func(ctx context.Context, arg database.ValidateRedirectURIParams) (bool, error)) *MockQuerier_ValidateRedirectURI_Call {
	_c.Call.Return(run)
	return _c
}
