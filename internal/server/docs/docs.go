// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@easyflow.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/.well-known/jwks.json": {
            "get": {
                "description": "Returns the JSON Web Key Set (JWKS) for token verification following RFC 7517",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Well-Known"
                ],
                "summary": "Get JSON Web Key Set",
                "responses": {
                    "200": {
                        "description": "JSON Web Key Set",
                        "schema": {
                            "$ref": "#/definitions/internal_server_routes_wellknown.JWKSet"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    }
                }
            }
        },
        "/.well-known/oauth-authorization-server": {
            "get": {
                "description": "Returns OAuth 2.0 Authorization Server Metadata following RFC 8414",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Well-Known"
                ],
                "summary": "Get OAuth2 Authorization Server Metadata",
                "responses": {
                    "200": {
                        "description": "OAuth2 server metadata",
                        "schema": {
                            "$ref": "#/definitions/internal_server_routes_wellknown.OAuth2Metadata"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    }
                }
            }
        },
        "/.well-known/openid-configuration": {
            "get": {
                "description": "Returns OAuth 2.0 Authorization Server Metadata following RFC 8414",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Well-Known"
                ],
                "summary": "Get OAuth2 Authorization Server Metadata",
                "responses": {
                    "200": {
                        "description": "OAuth2 server metadata",
                        "schema": {
                            "$ref": "#/definitions/internal_server_routes_wellknown.OAuth2Metadata"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    }
                }
            }
        },
        "/admin/stats": {
            "get": {
                "description": "Retrieve system statistics including user, client, and session counts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get system statistics",
                "responses": {
                    "200": {
                        "description": "System statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve stats",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/system-info": {
            "get": {
                "description": "Retrieve system information including version and health status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get system information",
                "responses": {
                    "200": {
                        "description": "System information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve system info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate a user and create a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server_routes_auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful, session token set in cookie",
                        "schema": {
                            "$ref": "#/definitions/internal_server_routes_auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "delete": {
                "security": [
                    {
                        "SessionToken": []
                    }
                ],
                "description": "Log out the current user and clear session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "responses": {
                    "204": {
                        "description": "Logout successful"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create a new user account with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_server_routes_auth.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully created",
                        "schema": {
                            "$ref": "#/definitions/internal_server_routes_auth.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    }
                }
            }
        },
        "/oauth/authorize": {
            "get": {
                "security": [
                    {
                        "SessionToken": []
                    }
                ],
                "description": "Initiates the OAuth2 authorization code flow with PKCE. Requires user to be authenticated via session token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Authorization endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Redirect URI (required if client has multiple registered URIs)",
                        "name": "redirect_uri",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Response type (must be 'code')",
                        "name": "response_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State parameter for CSRF protection (max 255 characters)",
                        "name": "state",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PKCE code challenge",
                        "name": "code_challenge",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to redirect_uri with authorization code and state"
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - session token required",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    }
                }
            }
        },
        "/oauth/token": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Exchange authorization code for access token, refresh tokens, or use client credentials flow",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Token endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Grant type (authorization_code, client_credentials, or refresh_token)",
                        "name": "grant_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client ID (required if not using Basic Auth)",
                        "name": "client_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Authorization code (required for authorization_code grant)",
                        "name": "code",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "PKCE code verifier (required for authorization_code grant)",
                        "name": "code_verifier",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Refresh token (required for refresh_token grant)",
                        "name": "refresh_token",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token response with access token and optional refresh token",
                        "schema": {
                            "$ref": "#/definitions/internal_server_routes_oauth.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters or grant type",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    },
                    "401": {
                        "description": "Invalid client credentials",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "easyflow-oauth2-server_internal_shared_errors.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code represents the HTTP status code",
                    "type": "integer",
                    "example": 400
                },
                "details": {
                    "description": "Details contains additional error information (optional)"
                },
                "error": {
                    "description": "Error represents a predefined error code from the enum package",
                    "allOf": [
                        {
                            "$ref": "#/definitions/easyflow-oauth2-server_internal_shared_errors.ErrorCode"
                        }
                    ],
                    "example": "INVALID_REQUEST_BODY"
                }
            }
        },
        "easyflow-oauth2-server_internal_shared_errors.ErrorCode": {
            "type": "string",
            "enum": [
                "UNAUTHORIZED",
                "NOT_ALLOWED",
                "NOT_FOUND",
                "ALREADY_EXISTS",
                "INTERNAL_SERVER_ERROR",
                "MISSING_SESSION_TOKEN",
                "INVALID_SESSION_TOKEN",
                "MISSING_CLIENT_ID",
                "INVALID_CLIENT_ID",
                "MISSING_CLIENT_SECRET",
                "INVALID_CLIENT_SECRET",
                "MISSING_CODE_CHALLENGE",
                "MISSING_STATE",
                "INVALID_STATE",
                "MISSING_REDIRECT_URI",
                "INVALID_REDIRECT_URI",
                "INVALID_CONTENT_TYPE",
                "INVALID_REQUEST_BODY",
                "MISSING_GRANT_TYPE",
                "INVALID_GRANT_TYPE",
                "MISSING_CODE",
                "INVALID_CODE",
                "MISSING_CODE_VERIFIER",
                "INVALID_CODE_VERIFIER",
                "MISSING_REFRESH_TOKEN",
                "INVALID_REFRESH_TOKEN"
            ],
            "x-enum-varnames": [
                "Unauthorized",
                "NotAllowed",
                "NotFound",
                "AlreadyExists",
                "InternalServerError",
                "MissingSessionToken",
                "InvalidSessionToken",
                "MissingClientID",
                "InvalidClientID",
                "MissingClientSecret",
                "InvalidClientSecret",
                "MissingCodeChallenge",
                "MissingState",
                "InvalidState",
                "MissingRedirectURI",
                "InvalidRedirectURI",
                "InvalidContentType",
                "InvalidRequestBody",
                "MissingGrantType",
                "InvalidGrantType",
                "MissingCode",
                "InvalidCode",
                "MissingCodeVerifier",
                "InvalidCodeVerifier",
                "MissingRefreshToken",
                "InvalidRefreshToken"
            ]
        },
        "internal_server_routes_auth.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "first_name": {
                    "description": "FirstName and LastName are optional fields",
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "description": "User's last name (optional)",
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "description": "User's password (minimum 8 characters)",
                    "type": "string",
                    "minLength": 8,
                    "example": "securePassword123"
                }
            }
        },
        "internal_server_routes_auth.CreateUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "first_name": {
                    "description": "User's first name",
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "description": "User's unique identifier",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "last_name": {
                    "description": "User's last name",
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "internal_server_routes_auth.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "securePassword123"
                }
            }
        },
        "internal_server_routes_auth.LoginResponse": {
            "type": "object",
            "properties": {
                "expiresIn": {
                    "description": "Token expiration time in seconds",
                    "type": "integer",
                    "example": 3600
                },
                "session_token": {
                    "description": "JWT session token",
                    "type": "string",
                    "example": "eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "internal_server_routes_oauth.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "OAuth2 access token",
                    "type": "string",
                    "example": "eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9..."
                },
                "expires_in": {
                    "description": "Lifetime in seconds of the access token",
                    "type": "integer",
                    "example": 3600
                },
                "refresh_token": {
                    "description": "OAuth2 refresh token (optional)",
                    "type": "string",
                    "example": "eyJhbGciOiJFZERTQSIsInR5cCI6..."
                },
                "refresh_token_expires_in": {
                    "description": "Lifetime in seconds of the refresh token (optional)",
                    "type": "integer",
                    "example": 86400
                },
                "scopes": {
                    "description": "Granted scopes",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "read",
                        "write"
                    ]
                }
            }
        },
        "internal_server_routes_wellknown.JWK": {
            "type": "object",
            "properties": {
                "alg": {
                    "description": "Algorithm (e.g., \"EdDSA\")",
                    "type": "string",
                    "example": "EdDSA"
                },
                "crv": {
                    "description": "Curve (e.g., \"Ed25519\")",
                    "type": "string",
                    "example": "Ed25519"
                },
                "e": {
                    "description": "Exponent (for RSA)",
                    "type": "string"
                },
                "kid": {
                    "description": "Key ID",
                    "type": "string",
                    "example": "key-1"
                },
                "kty": {
                    "description": "Key Type (e.g., \"OKP\" for Octet string key pairs)",
                    "type": "string",
                    "example": "OKP"
                },
                "n": {
                    "description": "Modulus (for RSA)",
                    "type": "string"
                },
                "use": {
                    "description": "Public Key Use (e.g., \"sig\" for signature)",
                    "type": "string",
                    "example": "sig"
                },
                "x": {
                    "description": "X Coordinate (base64url encoded)",
                    "type": "string",
                    "example": "11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo"
                }
            }
        },
        "internal_server_routes_wellknown.JWKSet": {
            "type": "object",
            "properties": {
                "keys": {
                    "description": "Array of JSON Web Keys",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_server_routes_wellknown.JWK"
                    }
                }
            }
        },
        "internal_server_routes_wellknown.OAuth2Metadata": {
            "type": "object",
            "properties": {
                "authorization_endpoint": {
                    "description": "Authorization endpoint URL",
                    "type": "string",
                    "example": "https://auth.easyflow.com/oauth/authorize"
                },
                "code_challenge_methods_supported": {
                    "description": "Supported PKCE code challenge methods",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "S256"
                    ]
                },
                "grant_types_supported": {
                    "description": "Supported OAuth2 grant types",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "authorization_code",
                        "refresh_token"
                    ]
                },
                "introspection_endpoint": {
                    "description": "Token introspection endpoint",
                    "type": "string",
                    "example": "https://auth.easyflow.com/oauth/introspect"
                },
                "introspection_endpoint_auth_methods_supported": {
                    "description": "Supported introspection endpoint auth methods",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "client_secret_basic"
                    ]
                },
                "issuer": {
                    "description": "OAuth2 issuer identifier",
                    "type": "string",
                    "example": "https://auth.easyflow.com"
                },
                "jwks_uri": {
                    "description": "JSON Web Key Set URI",
                    "type": "string",
                    "example": "https://auth.easyflow.com/.well-known/jwks.json"
                },
                "op_policy_uri": {
                    "description": "Operator policy URI",
                    "type": "string",
                    "example": "https://easyflow.com/policy"
                },
                "op_tos_uri": {
                    "description": "Operator terms of service URI",
                    "type": "string",
                    "example": "https://easyflow.com/tos"
                },
                "registration_endpoint": {
                    "description": "Dynamic client registration endpoint",
                    "type": "string",
                    "example": "https://auth.easyflow.com/oauth/register"
                },
                "response_modes_supported": {
                    "description": "Supported response modes",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "query",
                        "fragment"
                    ]
                },
                "response_types_supported": {
                    "description": "Supported OAuth2 response types",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "code"
                    ]
                },
                "revocation_endpoint": {
                    "description": "Token revocation endpoint",
                    "type": "string",
                    "example": "https://auth.easyflow.com/oauth/revoke"
                },
                "revocation_endpoint_auth_methods_supported": {
                    "description": "Supported revocation endpoint auth methods",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "client_secret_basic"
                    ]
                },
                "scopes_supported": {
                    "description": "Supported scopes",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "openid",
                        "profile",
                        "email"
                    ]
                },
                "service_documentation": {
                    "description": "Service documentation URL",
                    "type": "string",
                    "example": "https://docs.easyflow.com"
                },
                "subject_types_supported": {
                    "description": "Supported subject types",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "public"
                    ]
                },
                "token_endpoint": {
                    "description": "Token endpoint URL",
                    "type": "string",
                    "example": "https://auth.easyflow.com/oauth/token"
                },
                "token_endpoint_auth_methods_supported": {
                    "description": "Supported token endpoint authentication methods",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "client_secret_basic",
                        "client_secret_post"
                    ]
                },
                "token_endpoint_auth_signing_alg_values_supported": {
                    "description": "Supported signing algorithms for token endpoint auth",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "RS256",
                        "ES256"
                    ]
                },
                "ui_locales_supported": {
                    "description": "Supported UI locales",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "en-US",
                        "de-DE"
                    ]
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "SessionToken": {
            "description": "Session token for authenticated users",
            "type": "apiKey",
            "name": "session_token",
            "in": "cookie"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it.
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Easyflow OAuth2 Server API",
	Description:      "Basic authentication for OAuth2 client credentials",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
